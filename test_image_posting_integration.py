#!/usr/bin/env python3
"""
Test script to verify the complete image posting integration.

This script tests the full workflow:
1. Generate an image using GenerateImageTool
2. Send the generated image to Matrix using SendMatrixImageTool
"""

import asyncio
import logging
import os
import sys
from pathlib import Path

# Add the project root to Python path
sys.path.insert(0, str(Path(__file__).parent))

from dotenv import load_dotenv
load_dotenv()

from chatbot.config import settings
from chatbot.core.world_state import WorldStateManager
from chatbot.tools.base import ActionContext
from chatbot.tools.media_generation_tools import GenerateImageTool
from chatbot.tools.matrix_tools import SendMatrixImageTool
from chatbot.integrations.matrix.observer import MatrixObserver


async def test_image_posting_integration():
    """Test the complete image posting workflow."""
    
    # Set up logging
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    )
    logger = logging.getLogger(__name__)
    
    logger.info("Starting image posting integration test...")
    
    try:
        # Initialize components
        world_state = WorldStateManager()
        matrix_observer = MatrixObserver(world_state)
        
        # Initialize Matrix observer
        await matrix_observer.start()
        logger.info("Matrix observer started")
        
        # Create tools
        image_gen_tool = GenerateImageTool()
        image_send_tool = SendMatrixImageTool()
        
        # Create action contexts
        context = ActionContext(
            matrix_observer=matrix_observer,
            world_state_manager=world_state
        )
        
        # Test 1: Generate an image
        logger.info("Test 1: Generating a test image...")
        
        gen_result = await image_gen_tool.execute(
            {
                "prompt": "A cute robot waving hello, digital art style",
                "style": "digital-art",
                "aspect_ratio": "1:1"
            },
            context
        )
        
        if gen_result.get("status") != "success":
            logger.error(f"Image generation failed: {gen_result}")
            return False
            
        image_url = gen_result.get("s3_image_url")
        if not image_url:
            logger.error("No image URL returned from generation")
            return False
            
        logger.info(f"‚úì Image generated successfully: {image_url}")
        
        # Test 2: Send the image to Matrix
        # Use the Robot Laboratory room that we can see in the logs
        test_room_id = "!zBaUOGAwGyzOEGWJFd:chat.ratimics.com"  # Robot Laboratory
        
        logger.info(f"Test 2: Sending image to Matrix room {test_room_id} (Robot Laboratory)...")
        
        send_result = await image_send_tool.execute(
            {
                "channel_id": test_room_id,
                "image_url": image_url,
                "caption": "ü§ñ Test image generated by the bot! This verifies the complete image posting workflow.",
                "filename": "test_robot_wave.png"
            },
            context
        )
        
        if send_result.get("status") != "success":
            logger.error(f"Image sending failed: {send_result}")
            return False
            
        logger.info(f"‚úì Image sent successfully to Matrix: {send_result}")
        
        # Test 3: Verify the tools are properly available
        logger.info("Test 3: Verifying tool schemas...")
        
        gen_schema = image_gen_tool.get_schema()
        send_schema = image_send_tool.get_schema()
        
        logger.info(f"‚úì GenerateImageTool schema: {gen_schema['name']}")
        logger.info(f"‚úì SendMatrixImageTool schema: {send_schema['name']}")
        
        logger.info("üéâ All tests passed! Image posting integration is working correctly.")
        return True
        
    except Exception as e:
        logger.error(f"Test failed with exception: {e}", exc_info=True)
        return False
    finally:
        # Clean up
        if 'matrix_observer' in locals():
            await matrix_observer.stop()
        logger.info("Test cleanup completed")


async def test_tool_registration():
    """Test that the tools are properly registered in the orchestrator."""
    logger = logging.getLogger(__name__)
    
    try:
        from chatbot.tools.registry import ToolRegistry
        
        # Create a test registry and register tools like the orchestrator does
        registry = ToolRegistry()
        
        # Register the image tools
        registry.register_tool(GenerateImageTool())
        registry.register_tool(SendMatrixImageTool())
        
        # Check that tools are available
        tool_names = registry.get_tool_names()
        
        assert "generate_image" in tool_names, "GenerateImageTool not registered"
        assert "send_matrix_image" in tool_names, "SendMatrixImageTool not registered"
        
        logger.info(f"‚úì Tools properly registered: {tool_names}")
        
        # Test tool schemas
        gen_tool = registry.get_tool("generate_image")
        send_tool = registry.get_tool("send_matrix_image")
        
        assert gen_tool is not None, "GenerateImageTool not retrievable"
        assert send_tool is not None, "SendMatrixImageTool not retrievable"
        
        logger.info("‚úì Tool registration test passed")
        return True
        
    except Exception as e:
        logger.error(f"Tool registration test failed: {e}", exc_info=True)
        return False


if __name__ == "__main__":
    async def main():
        print("ü§ñ Testing Image Posting Integration\n")
        
        # Test 1: Tool registration
        print("=" * 50)
        print("Test 1: Tool Registration")
        print("=" * 50)
        registration_ok = await test_tool_registration()
        
        if not registration_ok:
            print("‚ùå Tool registration test failed!")
            return
            
        # Test 2: Full integration
        print("\n" + "=" * 50)
        print("Test 2: Full Integration Workflow")
        print("=" * 50)
        integration_ok = await test_image_posting_integration()
        
        if integration_ok:
            print("\nüéâ All tests completed successfully!")
            print("\nThe image posting functionality is now ready to use!")
            print("\nThe AI can now:")
            print("1. Generate images using the 'generate_image' tool")
            print("2. Send images to Matrix using the 'send_matrix_image' tool")
            print("3. Send images to Farcaster using the existing 'send_farcaster_post' tool with image_s3_url parameter")
        else:
            print("\n‚ùå Integration test failed!")
    
    asyncio.run(main())
