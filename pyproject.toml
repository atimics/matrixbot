[tool.poetry]
name = "ratichat"
version = "0.1.0"
description = "RatiChat - A context-aware AI chatbot with Matrix and Farcaster integration."
authors = ["RatiChat Team <your-email@example.com>"]
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "^3.10"
# --- Core & Web ---
fastapi = "^0.111.0"
uvicorn = "^0.29.0"
pydantic = "^2.7.1"
pydantic-settings = "^2.2.1"
httpx = "^0.28.1"
colorlog = "^6.8.2"

# --- AI & LLM ---
google-genai = "^1.19.0"
ollama = "^0.2.1"

# --- Database & ORM ---
sqlmodel = "^0.0.18"
alembic = "^1.13.1"

# --- Security & Crypto ---
cryptography = "^45.0.3"
bcrypt = "^4.1.2"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
hvac = {version = "^2.1.0", optional = true}

# --- Matrix Integration ---
matrix-nio = {extras = ["e2e"], version = "^0.24.0"}

# --- Blockchain & Web3 ---
web3 = "^6.15.1"
aiohttp = "^3.9.5"

# --- Utilities ---
python-dotenv = "^1.0.1"
markdown = "^3.6"
pillow = "^10.3.0"
base58 = "^2.1.1"
aiosqlite = "^0.21.0"
arweave-python-client = "^1.0.19"
python-multipart = "^0.0.20"

[tool.poetry.group.dev.dependencies]
# Testing Framework
pytest = "^8.2.0"
pytest-asyncio = "^0.23.6"
pytest-cov = "^5.0.0"
pytest-mock = "^3.14.0"
pytest-xdist = "^3.6.0"  # Parallel test execution
pytest-timeout = "^2.3.1"
pytest-random-order = "^1.1.0"
factory-boy = "^3.3.0"
faker = "^25.8.0"
freezegun = "^1.5.1"
responses = "^0.25.3"

# Code Quality & Linting
ruff = "^0.4.5"  # Modern Python linter and formatter
mypy = "^1.10.0"  # Type checking
black = "^24.4.2"  # Code formatting (backup to ruff)
isort = "^5.13.2"  # Import sorting

# Security
bandit = "^1.7.8"  # Security linting
safety = "^3.2.0"  # Dependency vulnerability scanning

# Documentation
mkdocs = "^1.6.0"
mkdocs-material = "^9.5.20"

# Development Tools
pre-commit = "^3.7.1"  # Git hooks
ipython = "^8.24.0"  # Better REPL
rich = "^13.7.1"  # Pretty printing for debugging

[tool.ruff]
# Ruff configuration for linting and formatting
line-length = 88
target-version = "py311"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # Line too long (handled by formatter)
    "B008",  # Do not perform function calls in argument defaults
    "ARG001", # Unused function argument (common in async handlers)
    "ARG002", # Unused method argument
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.per-file-ignores]
"tests/*" = ["ARG", "S101"]  # Allow unused args and asserts in tests

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*", "*Tests"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=chatbot",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=70",
    "-v",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "service: Service tests",
    "slow: Slow running tests",
    "database: Tests that require database",
    "network: Tests that require network access",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["chatbot"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.extras]
vault = ["hvac"]