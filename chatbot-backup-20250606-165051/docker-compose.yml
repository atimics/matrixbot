# Full-Stack Containerized Architecture
version: '3.8'

services:
  postgres:
    image: postgres:14-alpine
    container_name: chatbot_postgres
    environment:
      POSTGRES_USER: synapse
      POSTGRES_PASSWORD: ${SYNAPSE_DB_PASSWORD}
      POSTGRES_DB: synapse
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - chatbot_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U synapse"]
      interval: 30s
      timeout: 10s
      retries: 5

  synapse:
    image: matrixdotorg/synapse:latest
    container_name: chatbot_synapse
    ports:
      - "8008:8008"
      - "8448:8448"
    volumes:
      - ./synapse-data:/data
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - chatbot_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8008/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  chatbot:
    build:
      context: .
      dockerfile: chatbot.Dockerfile
    container_name: chatbot_backend
    ports:
      - "8000:8000" # Expose the API server
    volumes:
      - .:/app # Mount current directory for live code changes during development
      - ./chatbot.db:/app/chatbot.db # Persist the chatbot's own DB
      - ./context_storage:/app/context_storage # Persist training data
      - ./matrix_store:/app/matrix_store # Persist matrix session data
    depends_on:
      synapse:
        condition: service_healthy
    networks:
      - chatbot_network
    environment:
      # Pass all required secrets and configs from a .env file
      - PYTHONUNBUFFERED=1
      - MATRIX_HOMESERVER=http://synapse:8008
      - MATRIX_USER_ID=${MATRIX_USER_ID}
      - MATRIX_PASSWORD=${MATRIX_PASSWORD}
      - MATRIX_ROOM_ID=${MATRIX_ROOM_ID}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - NEYNAR_API_KEY=${NEYNAR_API_KEY}
      - FARCASTER_BOT_SIGNER_UUID=${FARCASTER_BOT_SIGNER_UUID}
      - FARCASTER_BOT_FID=${FARCASTER_BOT_FID}
      - FARCASTER_BOT_USERNAME=${FARCASTER_BOT_USERNAME}
      - ECOSYSTEM_TOKEN_CONTRACT_ADDRESS=${ECOSYSTEM_TOKEN_CONTRACT_ADDRESS}
      - ECOSYSTEM_TOKEN_NETWORK=${ECOSYSTEM_TOKEN_NETWORK}
      - NUM_TOP_HOLDERS_TO_TRACK=${NUM_TOP_HOLDERS_TO_TRACK}
      - AI_MODEL=${AI_MODEL}
      - WEB_SEARCH_MODEL=${WEB_SEARCH_MODEL}
      - LOG_LEVEL=${LOG_LEVEL}
      - CHATBOT_DB_PATH=/app/chatbot.db
      - OBSERVATION_INTERVAL=${OBSERVATION_INTERVAL}
      - MAX_CYCLES_PER_HOUR=${MAX_CYCLES_PER_HOUR}
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  ui:
    build:
      context: .
      dockerfile: ui.Dockerfile
    container_name: chatbot_ui
    ports:
      - "3000:3000"
    volumes:
      - ./ui:/app # Mount for live development
      - /app/node_modules # Anonymous volume to prevent host node_modules from overwriting container's
      - /app/.next # Anonymous volume to prevent build artifacts from being overwritten
    depends_on:
      chatbot:
        condition: service_healthy
    networks:
      - chatbot_network
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    restart: unless-stopped

volumes:
  postgres_data:
  synapse_data:

networks:
  chatbot_network:
    driver: bridge
