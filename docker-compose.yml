# Full-Stack Containerized Architecture

services:
  postgres:
    image: postgres:14-alpine
    container_name: chatbot_postgres
    environment:
      POSTGRES_USER: chatbot
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: chatbot
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - chatbot_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chatbot"]
      interval: 30s
      timeout: 10s
      retries: 5

  chatbot_backend:
    build:
      context: .
      dockerfile: Dockerfile  # Use main Dockerfile for production-ready build
    container_name: chatbot_backend
    ports:
      - "8000:8000" # Expose the API server
    volumes:
      - ./data:/app/data # Persist chatbot data (db, context storage, etc.)
      - ./matrix_store:/app/matrix_store # Persist matrix session data
      - ./.env:/app/.env:ro # Mount .env file for configuration (read-only)
    depends_on:
      postgres:
        condition: service_healthy
      arweave-service:
        condition: service_healthy
    networks:
      - chatbot_network
    env_file:
      - .env # Load environment variables from .env file
    environment:
      # Additional runtime environment
      - PYTHONUNBUFFERED=1
      - CHATBOT_DB_PATH=/app/data/chatbot.db
      - ARWEAVE_INTERNAL_UPLOADER_SERVICE_URL=http://arweave-service:8001
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  arweave-service:
    build:
      context: ./arweave-service
      dockerfile: Dockerfile
    container_name: arweave_service
    ports:
      - "8001:8001"  # Expose for testing and direct access
    environment:
      - ARWEAVE_WALLET_PATH=/data/arweave_wallet.json
      - PYTHONUNBUFFERED=1
    volumes:
      # Mount the wallet file directly from host data directory
      - ./data/arweave_wallet.json:/data/arweave_wallet.json:ro
    networks:
      - chatbot_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:8001/health')\" || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  chatbot_ui:
    build:
      context: ./ui-nextjs # Point to the Next.js app
      dockerfile: Dockerfile
    container_name: chatbot_ui
    ports:
      - "3000:3000"
    networks:
      - chatbot_network
    environment:
      # For client-side API calls (from browser)
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      # For server-side API calls (from Next.js server)
      - INTERNAL_API_URL=http://chatbot_backend:8000
    depends_on:
      - chatbot_backend
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  chatbot_network:
    driver: bridge
